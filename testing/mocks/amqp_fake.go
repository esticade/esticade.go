// Automatically generated by MockGen. DO NOT EDIT!
// Source: transport/amqp.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of AmqpService interface
type MockAmqpService struct {
	ctrl     *gomock.Controller
	recorder *_MockAmqpServiceRecorder
}

// Recorder for MockAmqpService (not exported)
type _MockAmqpServiceRecorder struct {
	mock *MockAmqpService
}

func NewMockAmqpService(ctrl *gomock.Controller) *MockAmqpService {
	mock := &MockAmqpService{ctrl: ctrl}
	mock.recorder = &_MockAmqpServiceRecorder{mock}
	return mock
}

func (_m *MockAmqpService) EXPECT() *_MockAmqpServiceRecorder {
	return _m.recorder
}

func (_m *MockAmqpService) Connect() error {
	ret := _m.ctrl.Call(_m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAmqpServiceRecorder) Connect() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Connect")
}

func (_m *MockAmqpService) Emit(eventName string, exchangeKey string, payload []byte) error {
	ret := _m.ctrl.Call(_m, "Emit", eventName, exchangeKey, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAmqpServiceRecorder) Emit(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Emit", arg0, arg1, arg2)
}

func (_m *MockAmqpService) On(eventName string, exchangeKey string, callback func([]byte) error) error {
	ret := _m.ctrl.Call(_m, "On", eventName, exchangeKey, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAmqpServiceRecorder) On(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "On", arg0, arg1, arg2)
}

func (_m *MockAmqpService) Shutdown() error {
	ret := _m.ctrl.Call(_m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAmqpServiceRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}
